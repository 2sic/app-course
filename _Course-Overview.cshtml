<div class="ly-maxwrapper ly-maxwrapper-white">
    <div class="container-fluid ly-content">
        <div class="ly-container-inner">
            <div class="panel-group co-kurs-wrapper" id="accordion" role="tablist" aria-multiselectable="true">
            	@foreach (var group in AsDynamic(Data["Default"]))
            		{
            			// Here's the short version for the list of course-parents
            			var courses = ((ToSic.Eav.Interfaces.IEntity)AsEntity(group))	// cast to use power-API
            				.Relationships.AllParents	// all parents, no matter what type
            				.Where(c => c.Type.Name == "Course")
            				.Select(c => AsDynamic(c))	// now only the courses
            				.Where(c => c.DateTo >= DateTime.Now.AddDays(-2) || c.individual == true);
	
            			<div class="panel panel-default">
            				<div class="panel-heading sc-element" role="tab" id="heading_@group.EntityId">
            			
            				  <h4 class="panel-title">
            					<a data-toggle="collapse" data-parent="#accordion" href="#collapse_@group.EntityId" aria-expanded="@((group.InitiallyExpanded == true) ? "true" : "false")" aria-controls="collapse_@group.EntityId" class="@((group.InitiallyExpanded == true) ? "" : "collapsed" )">
            					  	<span class="co-panel-icon">
                                @if(!String.IsNullOrEmpty(Content.Icon)){
                                    <i class="fa @group.Icon co-icon" aria-hidden="true"></i>
                                }
                            </span>
							@group.Title
            					</a>
            					@group.Toolbar
            				  </h4>
            				</div>
            				<div id="collapse_@group.EntityId" class="panel-collapse collapse @((group.InitiallyExpanded == true) ? "in" : "")" role="tabpanel" aria-labelledby="heading_@group.EntityId">
            				@if (!string.IsNullOrEmpty(group.Description))
                            {
            					<div class="panel-body">
            						@Html.Raw(group.Description)
                                    @if (!string.IsNullOrEmpty(group.Download))
            						{
                                        <a class="btn btn-md btn-default co-kurs-pdf" href="@group.Download" target="_blank"><span class="glyphicon glyphicon-file"></span> @App.Resources.Download</a>
                                    }
            					</div>
            				}
            				@if(Permissions.UserMayEditContent) {
								@Edit.Toolbar(toolbar: new { contentType = "Course", action = "new", prefill = new { Topic = @group.EntityGuid.ToString() } } )
								<i>Neuen Termin zur Gruppe hinzuf√ºgen</i>
							}
							
                               
            				<ul class="list-group">
            					@foreach (var course in courses.OrderBy(c => c.Date))
            						{
										var registrations = AsDynamic(App.Data["CourseRegistration"]).Where(c => c.Status == "registered" && c.Course.Count > 0 && c.Course[0].EntityGuid == course.EntityGuid);
										var freeSeats = @course.Seats - registrations.Count();

            							<li class="list-group-item xsc-element">
            							<div class="row sc-element">
            								<div class="col-xs-12 col-sm-3 col-md-3">
												@Edit.Toolbar(course, actions: "edit", settings: new { hover = "left"} )
            								    <strong>@App.Resources.CourseTitle</strong><br/>@course.Title
            								    
            								    @if(!string.IsNullOrEmpty(course.Management)) {
                								    <br/><br />
            										<strong>@App.Resources.Management</strong><br />@Html.Raw(course.Management)
        										}
        										
        										@if(!string.IsNullOrEmpty(course.Fee)) {
                								    <br/><br />
            										<strong>@App.Resources.Fee</strong><br />@Html.Raw(course.Fee)
        										}
												
            									@if(!string.IsNullOrEmpty(course.ShortDescription)) {
													<br><br>
													<strong>@App.Resources.LabelShortDescription</strong><br>
													<span>@Html.Raw(course.ShortDescription.Replace("\n", "<br/>"))</span>
												}

												@if(!string.IsNullOrEmpty(course.Document)) {
													<br><br>
                                        			<a class="btn btn-md btn-default co-kurs-pdf" style="position:relative; left:-12px;" href="@course.Document" target="_blank"><span class="glyphicon glyphicon-file"></span> @App.Resources.Download</a>
												}
        									</div>
            								<div class="col-xs-12 col-sm-2 col-md-2"></div>
            								<div class="col-xs-12 col-sm-4 col-md-4">
												<strong>@Html.Raw(App.Resources.DateTime)</strong>
												
												<br />
												@Html.Raw(course.Time.Replace("\n", "<br/>"))
												
												@if(!string.IsNullOrEmpty(course.City)) {
													<br /><br /> 
													<strong>@Html.Raw(App.Resources.Location.Replace("\n", "<br/>"))</strong>
													<br />
													@Html.Raw(course.City.Replace("\n", "<br/>")) 
												}
												
												<br /><br />

												@if(course.RegistrationEnabled && course.FullyBooked == false && course.Canceled == false) {
												<strong>@Html.Raw(App.Resources.Seats.Replace("\n", "<br/>"))</strong><br />@freeSeats<br />
												}
            								</div>
            								<div class="col-xs-12 col-sm-3 col-md-3">
            								@if (course.Canceled == true) {
            									<div class="alert alert-warning pull-right" role="alert">
            									<span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
            										@App.Resources.StatusCanceled
            									</div>
            								}
											else if(course.RegistrationEnabled) {
												if(freeSeats <= 0 || course.FullyBooked) {
													<div class="alert alert-warning pull-right" role="alert">
													<span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
														@App.Resources.StatusFullyBooked
													</div>
												}
												else {
													<a class="btn btn-md btn-primary pull-right" href="@Link.To(parameters: "mid=" + Dnn.Module.ModuleID + "&cid=" + @course.EntityId)"><span class="glyphicon glyphicon-log-in"></span> @App.Resources.Register</a>
												}
											}
            								@* toolbar to edit registrations of this course - opens the items and filters by this course-name *@
            								@Edit.Toolbar(toolbar: new object[] { 
            								    new { 
            								        showCondition = true,
                                                    command = new { action = "contentitems", 
                										contentType= "CourseRegistration", 
                										filters = new {Course = new[] { course.EntityTitle } } 
                									}
            									}
            								}, settings: new { hover="none", show = "always" })
            								</div>
            							</div>
            							</li>
            						}
            
            						@* if no courses exist, show this *@
            						@if(courses.Count() == 0) {
            							<li class="list-group-item xsc-element">
            								<div class="row">
            									<div class="col-xs-12">
            										@Html.Raw(App.Resources.NoCoursesFound)
            									</div>
            								</div>
            							</li>
            						}
            					</ul>
            				</div>
            			</div>
            		}
            </div>
        </div>
    </div>
</div>